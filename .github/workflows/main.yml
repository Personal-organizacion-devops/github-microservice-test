name: Build and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: CI
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - name: Obtener c√≥digo de fuente
        uses: actions/checkout@v4
      - name: Get short SHA
        id: short
        run: echo "short_sha=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_OUTPUT
      - name: Instalar dependencias
        run: echo "Iniciando build"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Ensure ECR repository exists
        run: |
          echo "Verificando si el repositorio '$ECR_REPOSITORY' existe en ECR..."
          if aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" > /dev/null 2>&1; then
            echo "‚úÖ El repositorio ya existe: $ECR_REPOSITORY"
          else
            echo "üöÄ El repositorio no existe. Cre√°ndolo..."
            aws ecr create-repository --repository-name "$ECR_REPOSITORY"
            echo "‚úÖ Repositorio creado: $ECR_REPOSITORY"
          fi
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: 306157427831.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ steps.short.outputs.short_sha }} 
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-reutil:
    name: "CD [dev]"
    needs: [build]
    environment: 'dev'
    uses: ./.github/workflows/deploy.yml
    with:
      aws_region: ${{ vars.AWS_REGION }}
      environment: 'dev'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-dev:
    name: "CD [dev]"
    needs: [deploy-reutil]
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: Obtener c√≥digo de fuente
        uses: actions/checkout@v4
      - name: Get short SHA
        id: short
        run: echo "short_sha=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_OUTPUT
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Update Lambda function
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REGISTRY: 306157427831.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ steps.short.outputs.short_sha }}
          REGION: ${{ vars.AWS_REGION }}
        run: |
          FUNCTION_NAME=lambda-ms-demo-dev
          SECRET_NAME=secret-ms-demo-dev

          # Actualizar variables de entorno
          aws lambda update-function-configuration \
            --function-name $FUNCTION_NAME \
            --environment "Variables={REGION=$REGION,SECRET_NAME=$SECRET_NAME}"

          echo "Esperando que termine la actualizaci√≥n de variables..."

          # Esperar hasta que la actualizaci√≥n sea exitosa
          while true; do
            STATUS=$(aws lambda get-function-configuration \
              --function-name $FUNCTION_NAME \
              --query LastUpdateStatus --output text)
            echo "Estado actual: $STATUS"

            if [ "$STATUS" == "Successful" ]; then
              echo "Actualizaci√≥n de variables completada."
              break
            elif [ "$STATUS" == "Failed" ]; then
              echo "Error: la actualizaci√≥n de variables fall√≥."
              exit 1
            else
              echo "Esperando 5 segundos..."
              sleep 5
            fi
          done

          # Actualizar c√≥digo (imagen container)
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  approval-qa:
    environment:
      name: approval-qa
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    steps:
      - name: Approve
        run: echo "Pending approval"

  deploy-qa:
    name: CD [qa]
    needs: [approval-qa]
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - name: Obtener c√≥digo de fuente
        uses: actions/checkout@v4
      - name: Instalar dependencias
        run: echo "Iniciando despliegue en qa"

  approval-prd:
    environment:
      name: approval-prd
    runs-on: ubuntu-latest
    needs: [deploy-qa]
    steps:
      - name: Approve
        run: echo "Pending approval"

  deploy-prd:
    name: CD [prd]
    needs: [approval-prd]
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - name: Obtener c√≥digo de fuente
        uses: actions/checkout@v4
      - name: Instalar dependencias
        run: echo "Iniciando despliegue en prd"